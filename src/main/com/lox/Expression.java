package com.lox;

/* This class is generated by com.lox.tool.AstGenerator */

abstract class Expression {
   interface Visitor<R> {
      R visitGrouping(Grouping grouping);
      R visitBinary(Binary binary);
      R visitUnary(Unary unary);
      R visitLiteral(Literal literal);
   }

   abstract <R> R accept(Visitor<R> visitor);

   static class Grouping extends Expression {
      private final Expression expression;

      Grouping(Expression expression) {
         this.expression = expression;
      }

      @Override
      <R> R accept(Visitor<R> visitor) {
         return visitor.visitGrouping(this);
      }
   }

   static class Binary extends Expression {
      private final Expression left;
      private final Token token;
      private final Expression right;

      Binary(Expression left, Token token, Expression right) {
         this.left = left;
         this.token = token;
         this.right = right;
      }

      @Override
      <R> R accept(Visitor<R> visitor) {
         return visitor.visitBinary(this);
      }
   }

   static class Unary extends Expression {
      private final Token operator;
      private final Expression right;

      Unary(Token operator, Expression right) {
         this.operator = operator;
         this.right = right;
      }

      @Override
      <R> R accept(Visitor<R> visitor) {
         return visitor.visitUnary(this);
      }
   }

   static class Literal extends Expression {
      private final Object value;

      Literal(Object value) {
         this.value = value;
      }

      @Override
      <R> R accept(Visitor<R> visitor) {
         return visitor.visitLiteral(this);
      }
   }

}
