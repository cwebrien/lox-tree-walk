package com.lox.tool;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

public class AstGenerator {

    private static final String TAB = "   ";

    /**
     * Generates Java class source for abstract syntax trees into the specified output directory.
     * @param args A single argument, the output directory for the .java source files
     * @throws IOException If we cannot successfully write the files
     */
    public static void main(String[] args) throws IOException {
        if (args.length != 1) {
            System.err.println("Usage: generate_ast <output_directory>");
            System.exit(64);
        }

        System.out.println("Generating AST");
        String outputDir = args[0];
        generateAstClass(outputDir, "Expression");
    }

    public static void generateAstClass(String outputDir, String baseName) throws IOException {
        String path = outputDir + "/" + baseName + ".java";
        PrintWriter writer = new PrintWriter(path, "UTF-8");

        writer.println("package com.lox;");
        writer.println();

        writer.println();
        writer.println("/* This class is generated by com.lox.tool.AstGenerator */");

        writer.println("import java.util.List;");
        writer.println();

        writer.println("abstract class " + baseName + " {");

        Map<String, List<String>> astClassToFields = Map.ofEntries(
                Map.entry("Binary", Arrays.asList("Expression left", "Token token", "Expression right")),
                Map.entry("Grouping", Arrays.asList("Expression expression")),
                Map.entry("Literal", Arrays.asList("Object value")),
                Map.entry("Unary", Arrays.asList("Token operator", "Expression right"))
        );

        astClassToFields.forEach((type, fieldList) -> {
            generateNestedAstSubClass(writer, baseName, type, fieldList);
            writer.println();
        });

        writer.println("}");

        writer.close();
    }

    public static void generateNestedAstSubClass(PrintWriter writer, String baseName, String subclassName, List<String> fieldList) {

        writer.println(TAB + "static class " + subclassName + " extends " + baseName + " {");

        fieldList.forEach(field -> writer.println(TAB + TAB + "private final " + field + ";"));
        writer.println();

        String constructorArguments = String.join(", ", fieldList);
        writer.println(TAB + TAB + subclassName + "(" + constructorArguments + ") {");

        fieldList.forEach(field -> {
            String fieldName = field.split(" ")[1];
            writer.println(TAB + TAB + TAB + "this." + fieldName + " = " + fieldName + ";");
        });


        writer.println(TAB + TAB + "}");

        writer.println(TAB + "}");
    }

}
