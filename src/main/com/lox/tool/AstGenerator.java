package com.lox.tool;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.List;

public class AstGenerator {


    /**
     * Generates Java class source for abstract syntax trees into the specified output directory.
     * @param args A single argument, the output directory for the .java source files
     * @throws IOException If we cannot successfully write the files
     */
    public static void main(String[] args) throws IOException {
        if (args.length != 1) {
            System.err.println("Usage: generate_ast <output_directory>");
            System.exit(64);
        }

        System.out.println("Generating AST");
        String outputDir = args[0];
        generateAstClasses(outputDir, "Expression");
    }

    public static void generateAstClasses(String outputDir, String baseName) throws IOException {
        String path = outputDir + "/" + baseName + ".java";
        PrintWriter writer = new PrintWriter(path, "UTF-8");

        writer.println("package com.lox;");
        writer.println();

        writer.println();
        writer.println("/* This class is generated by com.lox.tool.AstGenerator */");

        writer.println("import java.util.List;");
        writer.println();

        writer.println("abstract class " + baseName + " {");
        writer.println("}");

        List<String> types = Arrays.asList("Binary", "Grouping", "Literal", "Unary");
        for (String type : types) {
          //  generateSubClasses(writer, baseName, type, fieldList)
        }

        writer.close();
    }

}
